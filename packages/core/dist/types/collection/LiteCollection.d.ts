import { IReactionDisposer } from 'mobx';
import { Model } from '../model/Model';
import { AddConfig, FactoryFn, LiteCollectionConfig, ModelInsertPosition, RemoveConfig, RequiredLiteCollectionConfig, ResetConfig } from '../utils/types';
export declare class LiteCollection<TModel extends Model<LiteCollection<any, any>>, TFactory extends FactoryFn<TModel>> {
    protected factory: TFactory;
    protected _models: TModel[];
    protected modelByCid: Map<string, TModel>;
    protected modelByIdentity: Map<string | number, TModel>;
    protected config: RequiredLiteCollectionConfig;
    protected identityReactionByCid: Map<string, IReactionDisposer>;
    constructor(factory: TFactory, config?: LiteCollectionConfig);
    getConfig(): RequiredLiteCollectionConfig;
    protected assertIsModel(model: unknown): asserts model is TModel;
    push(model: TModel[]): TModel[];
    push(model: TModel): TModel | undefined;
    add(model: TModel[]): TModel[];
    add(model: TModel): TModel | undefined;
    unshift(model: TModel[]): TModel[];
    unshift(model: TModel): TModel | undefined;
    addAtIndex(model: TModel[], index: number): TModel[];
    addAtIndex(model: TModel, index: number): TModel | undefined;
    protected addToCollection(model: TModel, config: Omit<AddConfig, 'insertPosition'> & {
        insertPosition?: number | ModelInsertPosition;
    }): TModel | undefined;
    protected addToCollection(model: TModel[], config: Omit<AddConfig, 'insertPosition'> & {
        insertPosition?: number | ModelInsertPosition;
    }): TModel[];
    protected notPresent(model: TModel): boolean;
    protected startTracking(model: TModel): void;
    protected stopTracking(model: TModel): void;
    protected resolveModel(id: string): TModel | undefined;
    protected resolveModels(needle: string | string[]): TModel[];
    create(data: Parameters<TFactory>[0]): ReturnType<TFactory>;
    getById(id: string): TModel | undefined;
    getById(id: string[]): TModel[] | undefined;
    get models(): ReadonlyArray<TModel>;
    get new(): TModel[];
    get deleted(): TModel[];
    get syncing(): TModel[];
    get deleting(): TModel[];
    get saving(): TModel[];
    pop(config?: RemoveConfig): TModel | undefined;
    shift(config?: RemoveConfig): TModel | undefined;
    removeAtIndex(index: number, config?: RemoveConfig): TModel | undefined;
    remove(id: string, config?: RemoveConfig): TModel | undefined;
    remove(id: string[], config?: RemoveConfig): TModel[];
    protected removeFromCollection(model: TModel, config?: RemoveConfig): TModel | undefined;
    protected removeFromCollection(model: TModel[], config?: RemoveConfig): TModel[];
    protected notifyRemoved(model: TModel): void;
    protected notifyAdded(model: TModel): void;
    protected onRemoved(model: TModel): void;
    protected onAdded(model: TModel): void;
    serialize(): any;
    protected serializeModels(): any[];
    protected onSerialize(): any;
    protected resetCollection<T>(data?: T[], config?: ResetConfig): Promise<TModel[][]>;
    reset<T>(modelData?: T[], config?: ResetConfig): Promise<TModel[][]>;
    protected onReset(_added: TModel[], _removed: TModel[]): void;
    protected onModelCreateData(data: Parameters<TFactory>[0]): Parameters<TFactory>[0] | void;
    destroy(): void;
    protected onDestroy(): void;
}
